用\d可以匹配一个数字，\w可以匹配一个字母或数字
.可以匹配任意字符
*表示任意个字符（包括0个），用+表示至少一个字符，用?表示0个或1个字符，
用{n}表示n个字符，用{n,m}表示n-m个字符

\s可以匹配一个空格（也包括Tab等空白符）

可以用[]表示范围:
[0-9a-zA-Z\_]

A|B可以匹配A或B

^表示行的开头，^\d表示必须以数字开头。
$表示行的结束，\d$表示必须以数字结束。

注:r'***' => ***不转义

match()方法判断是否匹配，如果匹配成功，返回一个Match对象，否则返回None

用()表示的就是要提取的分组（Group):
m = re.match(r'(\d{4})-(\d{7})',phone)
print(m)                #obj
print(m.group(0))       #phone
print(m.group(1))       # (*)-
print(m.group(2))       # -(*)
group(0)永远是原始字符串
m.groups()              #  (x,y)

正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符
加个?就可以让\d+采用非贪婪匹配:
^(\d+?)(0*)$

datetime.now()返回当前日期和时间，其类型是datetime。

把一个datetime类型转换为timestamp只需要简单调用timestamp()方法

要把timestamp转换为datetime，使用datetime提供的fromtimestamp()方法

把str=>datetime通过datetime.strptime()实现
datetime => str   strftime()实现

datetime加减需要导入timedelta类

deque是为了高效实现插入和删除操作的双向列表，适合用于队列和栈

deque除了实现list的append()和pop()外，还支持appendleft()和popleft()，这样就可以非常高效地往头部添加或删除元素

如果要保持Key的顺序，可以用OrderedDict(按添加顺序排序)

Counter是一个简单的计数器

由于标准的Base64编码后可能出现字符+和/，
在URL中就不能直接作为参数，
所以又有一种"url safe"的base64编码，
其实就是把字符+和/分别变成-和_

md5加密,一个32位的16进制
sha1加密,一个40位的16进制

使用hmac和普通hash算法非常类似。hmac输出的长度和原始哈希算法的长度一致。
需要注意传入的key和message都是bytes类型，str类型需要首先编码为bytes

无限迭代器:natuals = itertools.count(1)
cycle()会把传入的一个序列无限重复下去
repeat()负责把一个元素无限重复下去，不过如果提供第二个参数就可以限定重复次数

无限序列虽然可以无限迭代下去，但是通常我们会通过takewhile()等函数根据条件判断来截取出一个有限的序列

chain()可以把一组迭代对象串联起来，形成一个更大的迭代器

groupby()把迭代器中  相邻  的重复元素挑出来放在一起：
实际上挑选规则是通过函数完成的，只要作用于函数的两个元素返回的值相等，这两个元素就被认为是在一组的，
而函数返回值作为组的key。

