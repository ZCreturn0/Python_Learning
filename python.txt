用r''表示''内部的字符串默认不转义
用'''...'''的格式表示多行内容

逻辑运算 not and or

空值None

/  浮点除
// 整除

ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符

len()函数计算的是str的字符数，如果换成bytes，len()函数就计算字节数

用len()函数可以获得list元素的个数
下标是负数表示从后获取,-1表示最后一个元素
末尾添加用append
insert插入到指定位置
pop()删除末尾,pop(i)删除下标i
list中数据类型可以不一样
list可嵌套(二维数组)

tuple   不可变的list(指向不变,所以里面的list还是可变的)
(1)表示小括号运算,返回1,要与tuple区分,=>(1,)

elif 替代了 else if

for item in list  去除list中的元素
不能n++ => n+=1

set需要提供一个list作为输入

内置函数:abs()  min()  max()  int()  hex()  

定义一个函数要使用def语句
如果没有return语句，函数执行完毕后也会返回结果，只是结果为None。return None可以简写为return。

from fileName import functionName

isinstance:like instanceof  
isinstance(var,type):
isinstance(x,int)
isinstance(x,(int,float))

raise TypeError('wrong type'):抛出异常

函数可返回多个值,事实是一个值(tuple),可这样赋值:(a,b,c) = (1,2,3)

默认参数也是一个变量★
默认参数必须指向不变对象

可变参数:参数名前加'*',传入list等,在list前加'*'
可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。而关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict

关键字参数传入dict等,前面加'**'
只接受指定名称的关键字:(a,b,*,c,d):
a,b必传,c,d为键,传的关键字键必须是c,d,'*'分隔
如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*了
关键字参数可缺省,缺省可不传
参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数

L[0:3] == L[:3]从0到3索引:   范围:[0,3)
从后取:最后一个为-1
tuple切片:(0,1,2,3,4)[:3]
字符串切片:'sdfdfgadf'[:3]

for key in D
for val in D.values()
for key,val in D.items()

isinstance(aaa,Iterable)    判断是否可迭代(需导入)
enumerate(L)    index,value

生成器generator:保存算法

a, b = b, a + b
等价于
t = (b, a + b) # t是一个tuple
a = t[0]
b = t[1]

如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个generator
函数是顺序执行，遇到return语句或者最后一行函数语句就返回。而变成generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行

可以直接作用于for循环的对象统称为可迭代对象：Iterable
可以被next()函数调用并不断返回下一个值的对象称为迭代器：

Iterable变成Iterator可以使用iter()函数
Iterator对象表示的是一个数据流

函数名也是变量

map()函数接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回
reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)

filter()函数返回的是一个Iterator

返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。★

@functools.wraps(func)保留返回值的__name__属性

当前时间戳:datetime.datetime.now().timestamp()

偏函数:可选参数传入一个固定参数,返回一个新的函数

每一个包目录下面都会有一个__init__.py的文件
__init__.py可以是空文件，也可以有Python代码

任何模块代码的第一个字符串都被视为模块的文档注释

sys模块有一个argv变量，用list存储了命令行的所有参数。argv至少有一个元素，因为第一个参数永远是该.py文件的名称

通过'_'前缀来实现private

和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量self，并且，调用时，不用传递该参数。

在Python中，变量名类似__xxx__的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是private变量

把属性的名称前加上两个下划线__，在Python中，实例的变量名如果以__开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问
不能直接访问__name是因为Python解释器对外把__name变量改成了_Student__name，所以，仍然可以通过_Student__name来访问__name变量

type(type)      like     typeof type

types.FunctionType              type(fn)
types.BuiltinFunctionType       type(abs)
types.LambdaType                type(lambda x: x)
types.GeneratorType             types.GeneratorType

isinstance继承链上都为True(往上方向)

要获得一个对象的所有属性和方法，可以使用dir()函数

getattr(obj,attr)       属性不存在 raise AttributeError
getattr(obj, 'z', 404) # 获取属性'z'，如果不存在，返回默认值404

setattr(obj,attr,val)
hasattr(obj,attr)

在定义class的时候，定义一个特殊的__slots__变量，来限制该class实例能添加的属性
__slots__定义的属性仅对当前类实例起作用，对继承的子类是不起作用的
除非在子类中也定义__slots__，这样，子类实例允许定义的属性就是自身的__slots__加上父类的__slots__

把一个getter (func) 方法变成属性，只需要加上@property就可以了
setter => @func.setter
只读属性:不定义setter

#python允许多线程

__init__     like     构造函数 

__str__   like   toString
__str__()返回用户看到的字符串，而__repr__()返回程序开发者看到的字符串
一般会:__repr__ = __str__

如果一个类想被用于for ... in循环，类似list或tuple那样，
就必须实现一个__iter__()方法，该方法返回一个迭代对象，
(实例对象本身是一个迭代对象)
然后，Python的for循环就会不断调用该迭代对象的__next__()方法
拿到循环的下一个值，直到遇到StopIteration错误时退出循环

像list那样按照下标取出元素，需要实现__getitem__()方法

切片对象slice:[0:3] [:5]

在没有找到属性的情况下，才调用__getattr__，已有的属性，不会在__getattr__中查找

我们定义的__getattr__默认返回就是None。要让class只响应特定的几个属性，我们就要按照约定，抛出AttributeError的错误

实例() => 执行__call__()方法

我们需要判断一个对象是否能被调用，能被调用的对象就是一个Callable对象

如果需要更精确地控制枚举类型，可以从Enum派生出自定义类
@unique装饰器可以帮助我们检查保证没有重复值

要创建一个class对象，type()函数依次传入3个参数：
class的名称；
继承的父类集合，注意Python支持多重继承，如果只有一个父类，别忘了tuple的单元素写法(object,)；
class的方法名称与函数绑定(dict)

metaclass允许你创建类或者修改类。换句话说，你可以把类看成是metaclass创建出来的“实例”

try:
    ....
except ErrorType as e:
    ...
else:
    ...
finally:
    ...

所有的错误类型都继承自BaseException
ValueError  ZeroDivisionError   UnicodeError
UnicodeError是ValueError的子类

logging.exception(e)        #打印

raise语句如果不带参数，就会把当前错误原样抛出

assert n != 0, 'n is zero!':
assert的意思是，表达式n != 0应该是True，否则，根据程序运行的逻辑，后面的代码肯定会出错。
如果断言失败，assert语句本身就会抛出AssertionError

$ python -O err.py  #关闭assert

$python -m pdb learn3.py进入pdb模式:
l查看代码
n执行下一行代码
p 变量名来查看变量
q结束调试

加断点:
import pdb，然后，在可能出错的地方放一个pdb.set_trace()

编写单元测试时，需要编写一个测试类，从unittest.TestCase继承
以test开头的方法就是测试方法，不以test开头的方法不被认为是测试方法，测试的时候不会被执行
对每一类测试都需要编写一个test_xxx()方法
assertEqual(unknownVal,exceptedVal)
with self.assertRaises(ValueError)

if __name__ == '__main__':
    unittest.main()
在特定环境执行测试代码

$ python -m unittest mydict_test

可以在单元测试中编写两个特殊的setUp()和tearDown()方法。这两个方法会分别在每调用一个测试方法的前后分别被执行。

